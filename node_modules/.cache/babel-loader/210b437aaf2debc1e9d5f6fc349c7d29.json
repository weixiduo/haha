{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { reqGoodsInfo, reqAddOrUpdateShopCart } from \"@/api\";\nimport { getUUID } from '@/utils/uuid_token';\nconst state = {\n  //state数据别乱写,服务器返回数据，返回数组【根据服务器返回的类型】\n  goodInfo: {},\n  //游客临时身份\n  uuid_token: getUUID()\n}; //修改state的唯一手段\n\nconst mutations = {\n  GETGOODINFO(state, goodInfo) {\n    state.goodInfo = goodInfo;\n  }\n\n}; //处理action，可以书写自己的业务逻辑，也可以处理自己的异步\n\nconst actions = {\n  //通过API里面的接口函数调用，向服务器发请求，获取服务器数据\n  async getGoodInfo({\n    commit\n  }, skuId) {\n    let result = await reqGoodsInfo(skuId);\n\n    if (result.code == 200) {\n      commit(\"GETGOODINFO\", result.data);\n    }\n  },\n\n  //ADD产品到购物车\n  // async AddOrUpdateShopCart({commit},{skuId,skuNum}){\n  //   let result= await AddOrUpdateShopCart(skuId,skuNum)\n  //   commit('ADDOR',result.data)\n  // }\n  //加入购物车的||修改某一个产品的个数\n  async addOrUpdateShopCart({\n    commit\n  }, {\n    skuId,\n    skuNum\n  }) {\n    //发请求:前端带一些参数给服务器【需要存储这些数据】，存储成功了，没有给返回数据\n    //不需要在三连环（仓库存储数据了）\n    //注意:async函数执行返回的结果一定是一个promise【要么成功，要么失败】\n    let result = await reqAddOrUpdateShopCart(skuId, skuNum);\n\n    if (result.code == 200) {\n      //返回的是成功的标记\n      return \"ok\";\n    } else {\n      //返回的是失败的标记\n      return Promise.reject(new Error(\"faile\"));\n    }\n  }\n\n}; //getters:理解为计算属性，用于简化仓库数据，让组件区数据更方便\n\nconst getters = {\n  categoryView(state) {\n    //比如:state.goodInfo初始状态空对象，空对象的categoryView属性值undefined\n    //当前计算出的 categoryView属性值至少是一个空对象，假的报错不会有了。\n    return state.goodInfo.categoryView || {};\n  },\n\n  //简化产品信息的数据\n  skuInfo(state) {\n    return state.goodInfo.skuInfo || {};\n  },\n\n  spuSaleAttrList(state) {\n    return state.goodInfo.spuSaleAttrList || [];\n  }\n\n};\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["reqGoodsInfo","reqAddOrUpdateShopCart","getUUID","state","goodInfo","uuid_token","mutations","GETGOODINFO","actions","getGoodInfo","commit","skuId","result","code","data","addOrUpdateShopCart","skuNum","Promise","reject","Error","getters","categoryView","skuInfo","spuSaleAttrList"],"sources":["F:/vuexianmu/app/src/store/detail/index.js"],"sourcesContent":["import {reqGoodsInfo,reqAddOrUpdateShopCart} from \"@/api\"\r\nimport {getUUID} from '@/utils/uuid_token'\r\nconst state={\r\n    //state数据别乱写,服务器返回数据，返回数组【根据服务器返回的类型】\r\n    goodInfo: {},\r\n  //游客临时身份\r\n  uuid_token:getUUID()\r\n}\r\n//修改state的唯一手段\r\nconst mutations={\r\n  GETGOODINFO(state, goodInfo) {\r\n    state.goodInfo = goodInfo;\r\n  },\r\n    \r\n    \r\n}\r\n//处理action，可以书写自己的业务逻辑，也可以处理自己的异步\r\nconst actions={\r\n    //通过API里面的接口函数调用，向服务器发请求，获取服务器数据\r\n    async getGoodInfo({ commit }, skuId) {\r\n        let result = await reqGoodsInfo(skuId);\r\n        if (result.code == 200) {\r\n          commit(\"GETGOODINFO\", result.data);\r\n        }\r\n      },\r\n  //ADD产品到购物车\r\n  // async AddOrUpdateShopCart({commit},{skuId,skuNum}){\r\n  //   let result= await AddOrUpdateShopCart(skuId,skuNum)\r\n  //   commit('ADDOR',result.data)\r\n  // }\r\n  //加入购物车的||修改某一个产品的个数\r\n  async addOrUpdateShopCart({ commit }, { skuId, skuNum }) {\r\n    //发请求:前端带一些参数给服务器【需要存储这些数据】，存储成功了，没有给返回数据\r\n    //不需要在三连环（仓库存储数据了）\r\n    //注意:async函数执行返回的结果一定是一个promise【要么成功，要么失败】\r\n    let result = await reqAddOrUpdateShopCart(skuId, skuNum);\r\n    if (result.code == 200) {\r\n      //返回的是成功的标记\r\n      return \"ok\";\r\n    } else {\r\n      //返回的是失败的标记\r\n      return Promise.reject(new Error(\"faile\"));\r\n    }\r\n  },\r\n};\r\n//getters:理解为计算属性，用于简化仓库数据，让组件区数据更方便\r\nconst getters={\r\n    categoryView(state) {\r\n        //比如:state.goodInfo初始状态空对象，空对象的categoryView属性值undefined\r\n        //当前计算出的 categoryView属性值至少是一个空对象，假的报错不会有了。\r\n        return state.goodInfo.categoryView || {};\r\n      },\r\n      //简化产品信息的数据\r\n      skuInfo(state) {\r\n        return state.goodInfo.skuInfo || {};\r\n      },\r\n      spuSaleAttrList(state){\r\n        return state.goodInfo.spuSaleAttrList||[];\r\n      }\r\n}\r\nexport default({\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n})"],"mappings":";AAAA,SAAQA,YAAR,EAAqBC,sBAArB,QAAkD,OAAlD;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,MAAMC,KAAK,GAAC;EACR;EACAC,QAAQ,EAAE,EAFF;EAGV;EACAC,UAAU,EAACH,OAAO;AAJR,CAAZ,C,CAMA;;AACA,MAAMI,SAAS,GAAC;EACdC,WAAW,CAACJ,KAAD,EAAQC,QAAR,EAAkB;IAC3BD,KAAK,CAACC,QAAN,GAAiBA,QAAjB;EACD;;AAHa,CAAhB,C,CAOA;;AACA,MAAMI,OAAO,GAAC;EACV;EACA,MAAMC,WAAN,CAAkB;IAAEC;EAAF,CAAlB,EAA8BC,KAA9B,EAAqC;IACjC,IAAIC,MAAM,GAAG,MAAMZ,YAAY,CAACW,KAAD,CAA/B;;IACA,IAAIC,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;MACtBH,MAAM,CAAC,aAAD,EAAgBE,MAAM,CAACE,IAAvB,CAAN;IACD;EACF,CAPO;;EAQZ;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,mBAAN,CAA0B;IAAEL;EAAF,CAA1B,EAAsC;IAAEC,KAAF;IAASK;EAAT,CAAtC,EAAyD;IACvD;IACA;IACA;IACA,IAAIJ,MAAM,GAAG,MAAMX,sBAAsB,CAACU,KAAD,EAAQK,MAAR,CAAzC;;IACA,IAAIJ,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;MACtB;MACA,OAAO,IAAP;IACD,CAHD,MAGO;MACL;MACA,OAAOI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,OAAV,CAAf,CAAP;IACD;EACF;;AA1BW,CAAd,C,CA4BA;;AACA,MAAMC,OAAO,GAAC;EACVC,YAAY,CAAClB,KAAD,EAAQ;IAChB;IACA;IACA,OAAOA,KAAK,CAACC,QAAN,CAAeiB,YAAf,IAA+B,EAAtC;EACD,CALO;;EAMR;EACAC,OAAO,CAACnB,KAAD,EAAQ;IACb,OAAOA,KAAK,CAACC,QAAN,CAAekB,OAAf,IAA0B,EAAjC;EACD,CATO;;EAURC,eAAe,CAACpB,KAAD,EAAO;IACpB,OAAOA,KAAK,CAACC,QAAN,CAAemB,eAAf,IAAgC,EAAvC;EACD;;AAZO,CAAd;AAcA,eAAe;EACXpB,KADW;EAEXG,SAFW;EAGXE,OAHW;EAIXY;AAJW,CAAf"},"metadata":{},"sourceType":"module"}