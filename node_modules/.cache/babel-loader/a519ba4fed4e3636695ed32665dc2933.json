{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\n//axios进行二次封装\nimport axios from 'axios'; //创建axios实例[创建出来的实例即为axios，只不过可以配置一些东西]\n\nvar instance = axios.create({\n  //可以给请求路径中添加一些参数 \n  baseURL: \"/api\",\n  //设置请求时间（5S）\n  timeout: 5000\n}); //请求拦截器:在发请求之前可以检测到，可以干一些事情\n\ninstance.interceptors.request.use(function (config) {\n  //通过上行请求的请求头，把用户临时身份带给服务器\n  //请求头添加的属性名字不能瞎写，因为已经和后台人员商量好了\n  //如果不叫做userTempid字段，服务器获取不到\n  //config配置对象，这里面有请求头\n  //config，请求拦截器的一个配置对象\n  if (store.state.shopcart.userTempId) {\n    config.headers.userTempId = store.state.shopcart.userTempId;\n  } //用户身份token\n\n\n  if (store.state.user.token) {\n    //请求头的这个属性token，和后台老师商量好的了，不能叫做别的名字\n    config.headers.token = store.state.user.token;\n  } //检测到程序发请求，请求拦截器可以检测到，进度条开始动\n\n\n  nprogress.start();\n  return config;\n}); //响应拦截器：服务器的数据已经返回了，可以干一些事情\n\ninstance.interceptors.response.use(function (res) {\n  //简化服务器返回的数据格式\n  //服务器数据返回进度条结束\n  nprogress.done();\n  return res.data;\n}, function (error) {\n  //终止promise链\n  return Promise.reject(error);\n}); //对外暴露二次封装的axios\n\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","timeout","interceptors","request","use","config","store","state","shopcart","userTempId","headers","user","token","nprogress","start","response","res","done","data","error","Promise","reject"],"sources":["F:/vuexianmu/app/src/api/request.js"],"sourcesContent":["//axios进行二次封装\r\nimport axios from 'axios';\r\n//创建axios实例[创建出来的实例即为axios，只不过可以配置一些东西]\r\nlet instance = axios.create({\r\n    //可以给请求路径中添加一些参数 \r\n    baseURL: \"/api\",\r\n    //设置请求时间（5S）\r\n    timeout: 5000\r\n});\r\n//请求拦截器:在发请求之前可以检测到，可以干一些事情\r\ninstance.interceptors.request.use((config) => {\r\n    //通过上行请求的请求头，把用户临时身份带给服务器\r\n    //请求头添加的属性名字不能瞎写，因为已经和后台人员商量好了\r\n    //如果不叫做userTempid字段，服务器获取不到\r\n   //config配置对象，这里面有请求头\r\n   //config，请求拦截器的一个配置对象\r\n   if(store.state.shopcart.userTempId){\r\n       config.headers.userTempId = store.state.shopcart.userTempId;\r\n   }\r\n   //用户身份token\r\n   if(store.state.user.token){\r\n     //请求头的这个属性token，和后台老师商量好的了，不能叫做别的名字\r\n     config.headers.token = store.state.user.token;\r\n   }\r\n   //检测到程序发请求，请求拦截器可以检测到，进度条开始动\r\n   nprogress.start();\r\n   return config;\r\n});\r\n\r\n//响应拦截器：服务器的数据已经返回了，可以干一些事情\r\ninstance.interceptors.response.use((res) => {\r\n   //简化服务器返回的数据格式\r\n   //服务器数据返回进度条结束\r\n   nprogress.done();\r\n   return res.data;\r\n}, (error) => {\r\n   //终止promise链\r\n   return Promise.reject(error);\r\n});\r\n//对外暴露二次封装的axios\r\nexport default instance;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,IAAIC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;EACxB;EACAC,OAAO,EAAE,MAFe;EAGxB;EACAC,OAAO,EAAE;AAJe,CAAb,CAAf,C,CAMA;;AACAH,QAAQ,CAACI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAACC,MAAD,EAAY;EAC1C;EACA;EACA;EACD;EACA;EACA,IAAGC,KAAK,CAACC,KAAN,CAAYC,QAAZ,CAAqBC,UAAxB,EAAmC;IAC/BJ,MAAM,CAACK,OAAP,CAAeD,UAAf,GAA4BH,KAAK,CAACC,KAAN,CAAYC,QAAZ,CAAqBC,UAAjD;EACH,CAR0C,CAS3C;;;EACA,IAAGH,KAAK,CAACC,KAAN,CAAYI,IAAZ,CAAiBC,KAApB,EAA0B;IACxB;IACAP,MAAM,CAACK,OAAP,CAAeE,KAAf,GAAuBN,KAAK,CAACC,KAAN,CAAYI,IAAZ,CAAiBC,KAAxC;EACD,CAb0C,CAc3C;;;EACAC,SAAS,CAACC,KAAV;EACA,OAAOT,MAAP;AACF,CAjBD,E,CAmBA;;AACAP,QAAQ,CAACI,YAAT,CAAsBa,QAAtB,CAA+BX,GAA/B,CAAmC,UAACY,GAAD,EAAS;EACzC;EACA;EACAH,SAAS,CAACI,IAAV;EACA,OAAOD,GAAG,CAACE,IAAX;AACF,CALD,EAKG,UAACC,KAAD,EAAW;EACX;EACA,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACF,CARD,E,CASA;;AACA,eAAerB,QAAf"},"metadata":{},"sourceType":"module"}