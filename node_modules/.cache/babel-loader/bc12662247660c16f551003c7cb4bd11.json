{"ast":null,"code":"import _asyncToGenerator from \"F:/vuexianmu/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { reqCategoryList, reqGetBannerList, reqFloorList } from '@/api';\nvar state = {\n  //state数据别乱写,服务器返回数据，返回数组【根据服务器返回的类型】\n  categoryList: [],\n  bannerList: []\n}; //修改state的唯一手段\n\nvar mutations = {\n  CATEGORYLIST: function CATEGORYLIST(state, categoryList) {\n    state.categoryList = categoryList;\n  },\n  GETBANNERLIST: function GETBANNERLIST(state, bannerList) {\n    state.bannerList = bannerList;\n  }\n}; //处理action，可以书写自己的业务逻辑，也可以处理自己的异步\n\nvar actions = {\n  //通过API里面的接口函数调用，向服务器发请求，获取服务器数据\n  categoryList: function categoryList(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return reqCategoryList();\n\n            case 3:\n              result = _context.sent;\n\n              if (result.code == 200) {\n                commit('CATEGORYLIST', result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  getBannerList: function getBannerList(_ref2) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return reqGetBannerList();\n\n            case 3:\n              result = _context2.sent;\n\n              if (result.code == 200) {\n                commit(\"GETBANNERLIST\", result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  getFloor: function getFloor(_ref3) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var commit, result;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context3.next = 3;\n              return reqGetBannerList();\n\n            case 3:\n              result = _context3.sent;\n\n              if (result.code == 200) {\n                commit(\"GETBANNERLIST\", result.data);\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }\n}; //getters:理解为计算属性，用于简化仓库数据，让组件区数据更方便\n\nvar getters = {};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"names":["reqCategoryList","reqGetBannerList","reqFloorList","state","categoryList","bannerList","mutations","CATEGORYLIST","GETBANNERLIST","actions","commit","result","code","data","getBannerList","getFloor","getters"],"sources":["F:/vuexianmu/app/src/store/home/index.js"],"sourcesContent":["import {reqCategoryList,reqGetBannerList,reqFloorList} from '@/api'\r\nconst state={\r\n    //state数据别乱写,服务器返回数据，返回数组【根据服务器返回的类型】\r\n    categoryList:[],\r\n    bannerList:[]\r\n}\r\n//修改state的唯一手段\r\nconst mutations={\r\n    CATEGORYLIST(state,categoryList){\r\n        state.categoryList=categoryList\r\n    },\r\n    GETBANNERLIST(state,bannerList){\r\n        state.bannerList=bannerList\r\n    }\r\n    \r\n}\r\n//处理action，可以书写自己的业务逻辑，也可以处理自己的异步\r\nconst actions={\r\n    //通过API里面的接口函数调用，向服务器发请求，获取服务器数据\r\n  async categoryList({commit}){\r\n      let result=await reqCategoryList();\r\n     if(result.code==200){\r\n         commit('CATEGORYLIST',result.data)\r\n     }\r\n    },\r\n    async getBannerList({ commit }) {\r\n        //服务器返回banner数据--->存储于vuex当中\r\n        let result = await reqGetBannerList();\r\n        if (result.code == 200) {\r\n            commit(\"GETBANNERLIST\", result.data);\r\n        }\r\n    },\r\n    async getFloor({ commit }) {\r\n        //服务器返回banner数据--->存储于vuex当中\r\n        let result = await reqGetBannerList();\r\n        if (result.code == 200) {\r\n            commit(\"GETBANNERLIST\", result.data);\r\n        }\r\n    },\r\n};\r\n//getters:理解为计算属性，用于简化仓库数据，让组件区数据更方便\r\nconst getters={}\r\nexport default({\r\n    state,\r\n    mutations,\r\n    actions,\r\n    getters\r\n})"],"mappings":";;AAAA,SAAQA,eAAR,EAAwBC,gBAAxB,EAAyCC,YAAzC,QAA4D,OAA5D;AACA,IAAMC,KAAK,GAAC;EACR;EACAC,YAAY,EAAC,EAFL;EAGRC,UAAU,EAAC;AAHH,CAAZ,C,CAKA;;AACA,IAAMC,SAAS,GAAC;EACZC,YADY,wBACCJ,KADD,EACOC,YADP,EACoB;IAC5BD,KAAK,CAACC,YAAN,GAAmBA,YAAnB;EACH,CAHW;EAIZI,aAJY,yBAIEL,KAJF,EAIQE,UAJR,EAImB;IAC3BF,KAAK,CAACE,UAAN,GAAiBA,UAAjB;EACH;AANW,CAAhB,C,CASA;;AACA,IAAMI,OAAO,GAAC;EACV;EACIL,YAFM,8BAEgB;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAARM,MAAQ,QAARA,MAAQ;cAAA;cAAA,OACPV,eAAe,EADR;;YAAA;cACpBW,MADoB;;cAEzB,IAAGA,MAAM,CAACC,IAAP,IAAa,GAAhB,EAAoB;gBAChBF,MAAM,CAAC,cAAD,EAAgBC,MAAM,CAACE,IAAvB,CAAN;cACH;;YAJwB;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAKzB,CAPS;EAQJC,aARI,gCAQsB;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAVJ,MAAU,SAAVA,MAAU;cAAA;cAAA,OAETT,gBAAgB,EAFP;;YAAA;cAExBU,MAFwB;;cAG5B,IAAIA,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;gBACpBF,MAAM,CAAC,eAAD,EAAkBC,MAAM,CAACE,IAAzB,CAAN;cACH;;YAL2B;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAM/B,CAdS;EAeJE,QAfI,2BAeiB;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAVL,MAAU,SAAVA,MAAU;cAAA;cAAA,OAEJT,gBAAgB,EAFZ;;YAAA;cAEnBU,MAFmB;;cAGvB,IAAIA,MAAM,CAACC,IAAP,IAAe,GAAnB,EAAwB;gBACpBF,MAAM,CAAC,eAAD,EAAkBC,MAAM,CAACE,IAAzB,CAAN;cACH;;YALsB;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAM1B;AArBS,CAAd,C,CAuBA;;AACA,IAAMG,OAAO,GAAC,EAAd;AACA,eAAe;EACXb,KAAK,EAALA,KADW;EAEXG,SAAS,EAATA,SAFW;EAGXG,OAAO,EAAPA,OAHW;EAIXO,OAAO,EAAPA;AAJW,CAAf"},"metadata":{},"sourceType":"module"}